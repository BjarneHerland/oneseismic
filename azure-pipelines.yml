trigger:
  - master
  - release

resources:
  containers:
    - container: b1
      image: lambdaville/go-python:latest

jobs:
  - job: Build_Core
    steps:
      - script: |
          wget https://github.com/fmtlib/fmt/releases/download/6.0.0/fmt-6.0.0.zip
          unzip fmt-6.0.0.zip
          mkdir -p fmt-6.0.0/build
          cd fmt-6.0.0/build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF
          sudo make install -j2
        displayName: 'Build fmt'
      - script: |
          sudo apt-get install -y libgnutls-dev libcurl4-gnutls-dev
          sudo pip install scikit-build pybind11
          mkdir build
          cd build
          cmake ../core -DCMAKE_BUILD_TYPE=Release
        displayName: 'Setup seismic-cloud'

      - script: |
          make
        displayName: 'Build seismic-cloud'
        workingDirectory: build

      - script: |
          ctest --output-on-failure
        displayName: 'Test seismic-cloud'
        workingDirectory: build

  - job: Build_API
    container: b1
    variables:
      GOPATH: $(Pipeline.Workspace)/go
      TEST_COVERAGE_LIMIT: 35
    steps:
      - script: |
          go mod download
        displayName: 'Download modules'
        workingDirectory: api

      - script: |
          protoc -I ../protos ../protos/core.proto --go_out=plugins=grpc:proto
        displayName: 'Generating grpc client stubs'
        workingDirectory: api

      - script: |
          protoc -I ../protos ../protos/core.proto --go_out=plugins=grpc:proto
        displayName: 'Generating grpc server stubs'
        workingDirectory: corestub

      - script: |
          swag init
        displayName: Generate docs
        workingDirectory: api

      - script: |
          go build -tags prod
        displayName: 'Build api'
        workingDirectory: api

      - script: |
          go build
        displayName: 'Build corestub'
        workingDirectory: corestub

      - script: |
          go test -race -v ./...
        workingDirectory: api
        displayName: 'Run unit tests'

      - script: |
          go test -v -coverprofile=coverage.txt -covermode count 2>&1 ./... | go-junit-report > report.xml
          gocov convert coverage.txt > coverage.json
          gocov-xml < coverage.json > coverage.xml
          mkdir -p coverage
          gocov-html < coverage.json > coverage/index.html
        displayName: 'Generate test coverage report'
        workingDirectory: api

      - task: PublishCodeCoverageResults@1
        condition: always()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
          reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage

      - script: |
          COVERAGE=`go tool cover -func coverage.txt | tail -n 1 | awk '{print substr($3, 1, length($3)-1)}'`
          COVERAGE=${COVERAGE%.*}
          echo "Test coverage limit:" $TEST_COVERAGE_LIMIT%
          echo "Test coverage:" $COVERAGE%

          if (( COVERAGE < TEST_COVERAGE_LIMIT )); then
              exit 1
          fi
        displayName: 'Coverage limit'
        workingDirectory: api

  - job: docker_push
    steps:
      - script: |
          docker-compose build
          echo $(ACRPASSWD)|docker login -u lambdaville lambdaville.azurecr.io --password-stdin
          docker-compose push
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Push docker images'
      - script: |
          docker-compose -f tests/docker-compose.yml up --build --exit-code-from test
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Integration_tests'

schedules:
  - cron: '0 6 * * *'
    displayName: nightly build
    branches:
      include:
        - master
    always: true
