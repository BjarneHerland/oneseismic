# coding: utf-8

"""
    Seismic Cloud Api

    The Seismic Cloud Api  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from seismic_cloud_sdk.api_client import ApiClient


class StitchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def stitch(self, manifest_id, surface_id, **kwargs):  # noqa: E501
        """stitch  # noqa: E501

        post surface query to stitch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stitch(manifest_id, surface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manifest_id: The id of a manifest (required)
        :param str surface_id: The id of a surface (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stitch_with_http_info(manifest_id, surface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stitch_with_http_info(manifest_id, surface_id, **kwargs)  # noqa: E501
            return data

    def stitch_with_http_info(self, manifest_id, surface_id, **kwargs):  # noqa: E501
        """stitch  # noqa: E501

        post surface query to stitch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stitch_with_http_info(manifest_id, surface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manifest_id: The id of a manifest (required)
        :param str surface_id: The id of a surface (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manifest_id', 'surface_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stitch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manifest_id' is set
        if ('manifest_id' not in params or
                params['manifest_id'] is None):
            raise ValueError("Missing the required parameter `manifest_id` when calling `stitch`")  # noqa: E501
        # verify the required parameter 'surface_id' is set
        if ('surface_id' not in params or
                params['surface_id'] is None):
            raise ValueError("Missing the required parameter `surface_id` when calling `stitch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'manifest_id' in params:
            path_params['manifest_id'] = params['manifest_id']  # noqa: E501
        if 'surface_id' in params:
            path_params['surface_id'] = params['surface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/stitch/{manifest_id}/{surface_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stitch_dim(self, manifest_id, dim, lineno, **kwargs):  # noqa: E501
        """stitch_dim  # noqa: E501

        post surface query to stitch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stitch_dim(manifest_id, dim, lineno, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manifest_id: The id of a manifest (required)
        :param int dim: The dimension, either of 0,1,2 (required)
        :param int lineno: The line number (required)
        :return: ControllerBytes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stitch_dim_with_http_info(manifest_id, dim, lineno, **kwargs)  # noqa: E501
        else:
            (data) = self.stitch_dim_with_http_info(manifest_id, dim, lineno, **kwargs)  # noqa: E501
            return data

    def stitch_dim_with_http_info(self, manifest_id, dim, lineno, **kwargs):  # noqa: E501
        """stitch_dim  # noqa: E501

        post surface query to stitch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stitch_dim_with_http_info(manifest_id, dim, lineno, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manifest_id: The id of a manifest (required)
        :param int dim: The dimension, either of 0,1,2 (required)
        :param int lineno: The line number (required)
        :return: ControllerBytes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manifest_id', 'dim', 'lineno']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stitch_dim" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manifest_id' is set
        if ('manifest_id' not in params or
                params['manifest_id'] is None):
            raise ValueError("Missing the required parameter `manifest_id` when calling `stitch_dim`")  # noqa: E501
        # verify the required parameter 'dim' is set
        if ('dim' not in params or
                params['dim'] is None):
            raise ValueError("Missing the required parameter `dim` when calling `stitch_dim`")  # noqa: E501
        # verify the required parameter 'lineno' is set
        if ('lineno' not in params or
                params['lineno'] is None):
            raise ValueError("Missing the required parameter `lineno` when calling `stitch_dim`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'manifest_id' in params:
            path_params['manifest_id'] = params['manifest_id']  # noqa: E501
        if 'dim' in params:
            path_params['dim'] = params['dim']  # noqa: E501
        if 'lineno' in params:
            path_params['lineno'] = params['lineno']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/stitch/{manifest_id}/dim/{dim}/{lineno}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ControllerBytes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
