# coding: utf-8

"""
    Seismic Cloud Api

    The Seismic Cloud Api  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreManifest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cubeid': 'str',
        'dim0': 'list[int]',
        'dim1': 'list[int]',
        'dim2': 'list[int]'
    }

    attribute_map = {
        'cubeid': 'cubeid',
        'dim0': 'dim0',
        'dim1': 'dim1',
        'dim2': 'dim2'
    }

    def __init__(self, cubeid=None, dim0=None, dim1=None, dim2=None):  # noqa: E501
        """StoreManifest - a model defined in Swagger"""  # noqa: E501

        self._cubeid = None
        self._dim0 = None
        self._dim1 = None
        self._dim2 = None
        self.discriminator = None

        if cubeid is not None:
            self.cubeid = cubeid
        if dim0 is not None:
            self.dim0 = dim0
        if dim1 is not None:
            self.dim1 = dim1
        if dim2 is not None:
            self.dim2 = dim2

    @property
    def cubeid(self):
        """Gets the cubeid of this StoreManifest.  # noqa: E501


        :return: The cubeid of this StoreManifest.  # noqa: E501
        :rtype: str
        """
        return self._cubeid

    @cubeid.setter
    def cubeid(self, cubeid):
        """Sets the cubeid of this StoreManifest.


        :param cubeid: The cubeid of this StoreManifest.  # noqa: E501
        :type: str
        """

        self._cubeid = cubeid

    @property
    def dim0(self):
        """Gets the dim0 of this StoreManifest.  # noqa: E501


        :return: The dim0 of this StoreManifest.  # noqa: E501
        :rtype: list[int]
        """
        return self._dim0

    @dim0.setter
    def dim0(self, dim0):
        """Sets the dim0 of this StoreManifest.


        :param dim0: The dim0 of this StoreManifest.  # noqa: E501
        :type: list[int]
        """

        self._dim0 = dim0

    @property
    def dim1(self):
        """Gets the dim1 of this StoreManifest.  # noqa: E501


        :return: The dim1 of this StoreManifest.  # noqa: E501
        :rtype: list[int]
        """
        return self._dim1

    @dim1.setter
    def dim1(self, dim1):
        """Sets the dim1 of this StoreManifest.


        :param dim1: The dim1 of this StoreManifest.  # noqa: E501
        :type: list[int]
        """

        self._dim1 = dim1

    @property
    def dim2(self):
        """Gets the dim2 of this StoreManifest.  # noqa: E501


        :return: The dim2 of this StoreManifest.  # noqa: E501
        :rtype: list[int]
        """
        return self._dim2

    @dim2.setter
    def dim2(self, dim2):
        """Sets the dim2 of this StoreManifest.


        :param dim2: The dim2 of this StoreManifest.  # noqa: E501
        :type: list[int]
        """

        self._dim2 = dim2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreManifest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
